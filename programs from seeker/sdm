#!/usr/bin/env python3

import sys
import os
import subprocess
import re
from urllib.parse import urlparse
from PyQt5.QtWidgets import QApplication, QWidget, QHBoxLayout, QVBoxLayout, QPushButton, QLineEdit, QLabel, QTextEdit, QComboBox, QFileDialog, QDesktopWidget
from PyQt5.QtGui import QClipboard, QGuiApplication

import time  # Import the time module for calculating download time

class DownloaderApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("StormOS Download Manager")
        self.setGeometry(100, 100, 600, 400)

        self.source_file = ""
        self.download_url = ""
        self.save_directory = ""

        layout = QVBoxLayout()

        url_layout = QHBoxLayout()
        self.url_label = QLabel("Enter the download URL:")
        url_layout.addWidget(self.url_label)

        self.url_input = QLineEdit()
        self.url_input.returnPressed.connect(self.download_file)
        url_layout.addWidget(self.url_input)

        self.thread_label = QLabel("Threads:")
        url_layout.addWidget(self.thread_label)

        self.thread_combo = QComboBox()
        self.thread_combo.addItems(["1", "2", "4", "8"])
        self.thread_combo.setCurrentIndex(3)
        url_layout.addWidget(self.thread_combo)

        layout.addLayout(url_layout)

        paste_button = QPushButton("Paste", self)
        paste_button.clicked.connect(self.fill_url_from_clipboard)
        layout.addWidget(paste_button)

        self.directory_label = QLabel("Select Download Directory:")
        layout.addWidget(self.directory_label)

        self.directory_combo = QComboBox()
        self.directory_combo.addItems(["Videos", "Music", "Downloads", "Custom"])
        self.directory_combo.setCurrentIndex(0)
        self.directory_combo.currentIndexChanged.connect(self.update_directory)
        layout.addWidget(self.directory_combo)

        self.custom_dir_input = QLineEdit()
        layout.addWidget(self.custom_dir_input)
        self.custom_dir_input.setVisible(False)

        self.download_button = QPushButton("Download")
        self.download_button.clicked.connect(self.download_file)
        layout.addWidget(self.download_button)

        self.clear_button = QPushButton("Clear")
        self.clear_button.clicked.connect(self.clear_data)
        layout.addWidget(self.clear_button)

        self.stop_button = QPushButton("Stop")
        self.stop_button.clicked.connect(self.stop_download)
        layout.addWidget(self.stop_button)
        self.stop_button.setEnabled(False)

        self.progress_label = QLabel("Download Progress:")
        layout.addWidget(self.progress_label)

        self.progress_text = QTextEdit()
        layout.addWidget(self.progress_text)

        self.setLayout(layout)

        # Initialize speed variables
        self.speed_pattern = re.compile(r'(\d+\.\d+\s*[BKMG]?B/s)')

        # Calculate the center position
        center_point = QDesktopWidget().availableGeometry().center()
        self.setGeometry(center_point.x() - 300, center_point.y() - 200, 600, 400)  # Center the window

        self.axel_process = None

        self.fill_url_from_clipboard()

    def fill_url_from_clipboard(self):
        clipboard = QGuiApplication.clipboard()
        clipboard_text = clipboard.text()

        if clipboard_text and clipboard_text.startswith("http"):
            self.url_input.setText(clipboard_text)

    def update_directory(self, index):
        if index == 3:  # Custom directory selected
            custom_dir = QFileDialog.getExistingDirectory(self, "Select Custom Directory")
            if custom_dir:
                self.custom_dir_input.setText(custom_dir)
                self.custom_dir_input.setVisible(True)
            else:
                self.directory_combo.setCurrentIndex(0)  # Set "Videos" as the default
        else:
            self.custom_dir_input.setVisible(False)

    def download_file(self):
        self.download_url = self.url_input.text()

        if not self.download_url:
            return

        selected_directory = self.directory_combo.currentText()
        if selected_directory == "Custom":
            custom_dir = self.custom_dir_input.text()
            if not custom_dir:
                return
            self.save_directory = custom_dir
        else:
            self.save_directory = os.path.expanduser(f"~/{selected_directory}")

        if not os.path.exists(self.save_directory):
            os.makedirs(self.save_directory)

        url_path = urlparse(self.download_url).path
        file_name = os.path.basename(url_path)

        if not file_name:
            file_name = "downloaded.mp4"

        self.source_file = os.path.join(self.save_directory, file_name)

        selected_threads = self.thread_combo.currentText()

        start_time = time.time()

        command = f"axel -n {selected_threads} -o '{self.source_file}' '{self.download_url}'"
        self.axel_process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)

        self.stop_button.setEnabled(True)

        while self.axel_process.poll() is None:
            line = self.axel_process.stdout.readline()
            if line:
                self.update_progress(line.strip())
                self.progress_text.append(line.strip())
                QApplication.processEvents()
            else:
                break

        end_time = time.time()
        download_time_seconds = end_time - start_time
        download_time_minutes = download_time_seconds // 60
        download_time_seconds %= 60
        self.progress_text.append(f"Download finished in {int(download_time_minutes)} minutes and {download_time_seconds:.2f} seconds")

        self.stop_button.setEnabled(False)

    def clear_data(self):
        self.progress_text.clear()
        self.url_input.clear()

    def update_progress(self, data):
        if "%" in data:
            try:
                percent = int(data.split('%')[0])
            except ValueError:
                return
            current = data.split('%')[1].strip()
            speed_match = self.speed_pattern.search(data)
            speed = speed_match.group(0) if speed_match else "N/A"
            remain = data.split('%')[2].split()[-1]
            self.progress_text.append(f"Downloading {current} ({percent}%): Speed: {speed}")
            QApplication.processEvents()

    def stop_download(self):
        if self.axel_process:
            self.axel_process.terminate()
            self.progress_text.append("Download stopped")
            self.stop_button.setEnabled(False)

    def run(self):
        self.show()
        sys.exit(app.exec_())

if __name__ == "__main__":
    app = QApplication(sys.argv)
    downloader_app = DownloaderApp()
    downloader_app.run()
