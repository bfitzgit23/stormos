#!/usr/bin/env python3

import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QPushButton, QVBoxLayout, QWidget, QLineEdit, QMessageBox, QCheckBox, QHBoxLayout
from PyQt5.QtCore import QTimer, QDateTime
from PyQt5.QtCore import Qt, QTime



class StormOSPomodoroTimer(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("StormOS Pomodoro Timer")
        self.setGeometry(100, 100, 350, 150)

        self.timer_interval = 1000  # Timer interval in milliseconds (1 second)
        self.remaining_time = 0
        self.timer_running = False

        self.label = QLabel("Focus for 25:00 minutes")
        self.start_button = QPushButton("Start")
        self.start_button.clicked.connect(self.toggle_timer)

        self.stop_button = QPushButton("Stop")
        self.stop_button.clicked.connect(self.stop_timer)
        self.stop_button.setEnabled(False)

        self.time_input = QLineEdit()
        self.time_input.setPlaceholderText("Enter focus time in minutes")
        self.time_input.setText("25")  # Set the default value
        self.set_time_button = QPushButton("Set Time")
        self.set_time_button.clicked.connect(self.set_focus_time)

        self.timer_paused = False
        
        self.stay_on_top_checkbox = QCheckBox("Stay on Top")
        self.stay_on_top_checkbox.setChecked(False)
        self.stay_on_top_checkbox.stateChanged.connect(self.toggle_stay_on_top)


        self.current_time_label = QLabel()
        self.update_current_time_label()
        self.update_time_timer = QTimer(self)
        self.update_time_timer.timeout.connect(self.update_current_time_label)
        self.update_time_timer.start(1000)

        self.is_label_blinking = False  # Add a flag to control blinking
        self.blink_timer = QTimer(self)
        self.blink_timer.timeout.connect(self.toggle_blink)
        self.blink_interval = 500  # Blink interval in milliseconds


        layout = QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.time_input)
        layout.addWidget(self.set_time_button)
        layout.addWidget(self.start_button)
        layout.addWidget(self.stop_button)

        # Add "Stay on Top" checkbox and current time label
        time_layout = QHBoxLayout()
        time_layout.addWidget(self.stay_on_top_checkbox)
        time_layout.addWidget(self.current_time_label)
        layout.addLayout(time_layout)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

    def toggle_timer(self):
        if self.timer_running:
            if self.timer_paused:
                self.timer.start(self.timer_interval)
                self.timer_paused = False
                self.start_button.setText("Pause")
                self.stop_blinking_label()  # Stop blinking when resumed
            else:
                self.timer.stop()
                self.timer_paused = True
                self.start_button.setText("Resume")
                self.start_blinking_label()  # Start blinking when paused
            self.stop_button.setEnabled(True)
        else:
            if self.validate_input():
                duration = int(self.time_input.text())
                self.remaining_time = duration * 60 if not self.timer_paused else self.remaining_time
                self.update_label()
                self.timer = QTimer(self)
                self.timer.timeout.connect(self.update_timer)
                self.timer.start(self.timer_interval)
                self.timer_running = True
                self.timer_paused = False
                self.start_button.setText("Pause")
                self.stop_button.setEnabled(True)



    def start_blinking_label(self):
        self.is_label_blinking = True
        self.blink_timer.start(self.blink_interval)

    def stop_blinking_label(self):
        self.is_label_blinking = False
        self.blink_timer.stop()
        #self.label.setStyleSheet("background-color: yellow; color: black;")
        #self.label.setText("Paused")  # Display "Paused" when paused

    def toggle_blink(self):
        current_stylesheet = self.label.styleSheet()
        if current_stylesheet == "":
            if self.timer_paused:
                self.label.setStyleSheet("background-color: yellow; color: black;")
                self.label.setText(f"Paused ({self.remaining_time // 60} minutes and {self.remaining_time % 60} seconds)")
            else:
                self.label.setStyleSheet("background-color: yellow; color: black;")
        else:
            self.label.setStyleSheet("")



    def update_label(self):
        minutes = self.remaining_time // 60
        seconds = self.remaining_time % 60
        
        if self.timer_paused:
            self.label.setStyleSheet("background-color: yellow; color: black;")
            self.label.setText(f"Paused ({minutes} minutes and {seconds} seconds)")
            self.start_blinking_label()  # Start blinking when paused
        elif self.remaining_time < 60:
            self.label.setStyleSheet("background-color: red; color: white;")
            self.label.setText(f"Focus for {seconds} seconds")
        else:
            self.label.setStyleSheet("background-color: green; color: white;")
            self.label.setText(f"Focus for {minutes} minutes and {seconds} seconds")








    def update_current_time_label(self):
        current_datetime = QDateTime.currentDateTime()
        formatted_datetime = current_datetime.toString("MMM dd, yyyy - hh:mm AP")
        self.current_time_label.setText(formatted_datetime)

    def validate_input(self):
        try:
            duration = int(self.time_input.text())
            if duration <= 0:
                raise ValueError
            return True
        except ValueError:
            return False

    def set_focus_time(self):
        if self.validate_input():
            duration = int(self.time_input.text())
            self.remaining_time = duration * 60
            self.update_label()

    def stop_timer(self):
        self.timer.stop()
        self.timer_running = False
        self.start_button.setText("Start")
        self.stop_button.setEnabled(False)
        self.remaining_time = 0
        self.update_label()

    def update_timer(self):
        if self.remaining_time > 0:
            self.remaining_time -= 1
            self.update_label()
        else:
            self.timer.stop()
            self.label.setStyleSheet("background-color: yellow; color: black;")
            self.label.setText("Time's up!")
            self.timer_running = False
            self.start_button.setText("Start")
            self.stop_button.setEnabled(False)
            self.remaining_time = 0
            self.play_sound()
            self.show_message_box()

    def reset_timer(self):
        self.remaining_time = 25 * 60  # Reset to 25 minutes
        self.update_label()
        self.time_input.setText("25")  # Reset the input field



    def toggle_stay_on_top(self, state):
        if state == Qt.Checked:
            self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)
            self.show()
        else:
            self.setWindowFlags(self.windowFlags() & ~Qt.WindowStaysOnTopHint)
            self.show()


    def play_sound(self):
        import subprocess
        subprocess.run(["paplay", "/usr/share/sounds/freedesktop/stereo/complete.oga"])

    def show_message_box(self):
        msg = QMessageBox()
        msg.setWindowTitle("Time's Up!")
        msg.setText("Your focus time is up!")
        msg.exec_()


        self.reset_timer()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = StormOSPomodoroTimer()
    window.show()
    sys.exit(app.exec_())
