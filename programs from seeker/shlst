#!/usr/bin/env python3

import os
import sys
from PyQt5.QtCore import Qt, QUrl
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QSlider, QLabel, QFileDialog, QDesktopWidget, QSizePolicy
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtGui import QIcon

class VideoPlayer(QMainWindow):
    def __init__(self, video_path=None):
        super().__init__()

        self.setWindowTitle("StormOS Video Player")
        self.setGeometry(100, 100, 1200, 800)

        self.media_player = QMediaPlayer(self)
        self.video_widget = QVideoWidget(self)
        self.media_player.setVideoOutput(self.video_widget)

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)

        self.layout = QVBoxLayout(self.central_widget)

        # Set the size policy of video_widget to expand both horizontally and vertically
        self.video_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.layout.addWidget(self.video_widget)

        # Add buttons and slider
        self.load_button = QPushButton("Load")
        self.load_button.setIcon(QIcon.fromTheme("document-open"))
        self.load_button.clicked.connect(self.open_video_dialog)

        self.play_button = QPushButton("Play")
        self.play_button.setIcon(QIcon.fromTheme("media-playback-start"))
        self.play_button.clicked.connect(self.play_pause)

        self.stop_button = QPushButton("Stop")
        self.stop_button.setIcon(QIcon.fromTheme("media-playback-stop"))
        self.stop_button.clicked.connect(self.media_player.stop)

        self.fullscreen_button = QPushButton("Fullscreen")
        self.fullscreen_button.setIcon(QIcon.fromTheme("view-fullscreen"))
        self.fullscreen_button.clicked.connect(self.toggle_fullscreen)

        self.backward_button = QPushButton("<<")
        self.backward_button.clicked.connect(self.backward)

        self.forward_button = QPushButton(">>")
        self.forward_button.clicked.connect(self.forward)

        self.volume_label = QLabel("Volume:")
        self.volume_label.setAlignment(Qt.AlignCenter)

        self.volume_percentage_label = QLabel("50%")
        self.volume_percentage_label.setAlignment(Qt.AlignCenter)

        self.volume_slider = QSlider(Qt.Horizontal)
        self.volume_slider.setRange(0, 100)
        self.volume_slider.setValue(50)
        self.volume_slider.valueChanged.connect(self.set_volume)

        self.seek_slider = QSlider(Qt.Horizontal)
        self.seek_slider.setRange(0, 0)
        self.seek_slider.sliderMoved.connect(self.set_position)

        control_layout = QHBoxLayout()
        control_layout.addWidget(self.load_button)
        control_layout.addWidget(self.play_button)
        control_layout.addWidget(self.stop_button)
        control_layout.addWidget(self.backward_button)
        control_layout.addWidget(self.forward_button)
        control_layout.addWidget(self.fullscreen_button)
        control_layout.addWidget(self.volume_label)
        control_layout.addWidget(self.volume_percentage_label)
        control_layout.addWidget(self.volume_slider)

        self.layout.addLayout(control_layout)
        self.layout.addWidget(self.seek_slider)

        # Time labels for displaying current and total time
        self.time_label_start = QLabel("0:00")
        self.time_label_end = QLabel("0:00")

        time_layout = QHBoxLayout()
        time_layout.addWidget(self.time_label_start)
        time_layout.addWidget(self.seek_slider)
        time_layout.addWidget(self.time_label_end)

        self.layout.addLayout(time_layout)

        self.media_player.durationChanged.connect(self.update_duration)
        self.media_player.positionChanged.connect(self.update_position)
        self.media_player.stateChanged.connect(self.update_buttons)

        self.center_window()

        if video_path:
            self.open_video(video_path)

        self.is_fullscreen = False  # Track fullscreen state

    def center_window(self):
        screen = QDesktopWidget().screenGeometry()
        size = self.geometry()
        x = (screen.width() - size.width()) // 2
        y = (screen.height() - size.height()) // 2
        self.move(x, y)

    def open_video_dialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_path, _ = QFileDialog.getOpenFileName(self, "Open Video File", "", "Video Files (*.mp4 *.m3u8);;All Files (*)", options=options)
        if file_path:
            self.open_video(file_path)

    def open_video(self, file_path):
        self.video_path = file_path
        self.media_player.setMedia(QMediaContent(QUrl.fromLocalFile(file_path)))
        self.play_pause()

        # Set the custom window title with the video title
        video_title = os.path.basename(file_path)
        self.setWindowTitle(f"StormOS Video Player - {video_title}")

    def play_pause(self):
        if self.media_player.state() == QMediaPlayer.PlayingState:
            self.media_player.pause()
        else:
            self.media_player.play()

    def set_volume(self, volume):
        self.media_player.setVolume(volume)
        self.volume_percentage_label.setText(f"{volume}%")

    def set_position(self, position):
        self.media_player.setPosition(position)

    def toggle_fullscreen(self):
        # Toggle fullscreen mode when the "Fullscreen" button is pressed or "Escape" key is pressed
        if not self.is_fullscreen:
            self.showFullScreen()
            self.is_fullscreen = True
        else:
            self.showNormal()
            self.is_fullscreen = False

    def backward(self):
        self.media_player.setPosition(self.media_player.position() - 10000)

    def forward(self):
        self.media_player.setPosition(self.media_player.position() + 10000)

    def update_duration(self, duration):
        self.seek_slider.setRange(0, duration)
        self.time_label_end.setText(self.format_time(duration / 1000))

    def update_position(self, position):
        self.seek_slider.setValue(position)
        self.time_label_start.setText(self.format_time(position / 1000))

    def update_buttons(self, state):
        if state == QMediaPlayer.PlayingState:
            self.play_button.setIcon(QIcon.fromTheme("media-playback-pause"))
        else:
            self.play_button.setIcon(QIcon.fromTheme("media-playback-start"))

    def format_time(self, seconds):
        minutes, seconds = divmod(int(seconds), 60)
        return "{:d}:{:02d}".format(minutes, seconds)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Space:
            self.play_pause()
        elif event.key() == Qt.Key_Escape:
            # Toggle fullscreen mode when the "Escape" key is pressed
            if self.is_fullscreen:
                self.showNormal()
                self.is_fullscreen = False

def main():
    app = QApplication(sys.argv)
    
    video_path = None
    if len(sys.argv) > 1:
        video_path = sys.argv[1]
    
    player = VideoPlayer(video_path)

    player.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
