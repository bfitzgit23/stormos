#!/usr/bin/env python
import subprocess
import json
import sys
from PyQt5.QtPrintSupport import QPrinter, QPrintDialog
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt, QUrl, QSettings
from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
    QSizePolicy,
    QAction,
    QFileDialog,
    QToolBar,
    QLineEdit,
    QPushButton,
    QTabWidget,
    QWidget,
    QVBoxLayout,
    QInputDialog,
    QMenuBar,
)

from PyQt5.QtWebEngineWidgets import QWebEngineView, QWebEnginePage



class StormyPage(QWebEnginePage):
    def __init__(self, browser):
        super().__init__()
        self.browser = browser
        self.link_url = None  # Store the link URL for later use


    def createStandardContextMenu(self, menu):
        super().createStandardContextMenu(menu)
        menu.addSeparator()
        
        # Create a custom context menu action for downloading the link
        self.download_link_action = QAction("Download Link with SDM", self)
        self.download_link_action.triggered.connect(self.download_link_with_sdm)
        menu.addAction(self.download_link_action)

    def download_link_with_sdm(self):
        if self.link_url:
            # Use subprocess to open your download manager (replace 'sdm' with the actual command)
            try:
                subprocess.Popen(['sdm', self.link_url])
            except FileNotFoundError:
                print("Download manager 'sdm' not found. Please provide the correct command.")

    def javaScriptAlert(self, url, msg):
        print(f"JavaScript Alert: {msg}")

    def acceptNavigationRequest(self, url, _type, isMainFrame):
        if not isMainFrame:
            # Store the link URL when a link is clicked
            self.link_url = url.toString()
        return super().acceptNavigationRequest(url, _type, isMainFrame)

class StormyBrowser(QMainWindow):
    def __init__(self):
        super().__init__()
        self.browser_tabs = QTabWidget()
        self.browser_tabs.setTabsClosable(True)
        self.browser_tabs.tabCloseRequested.connect(self.close_tab)
        self.setCentralWidget(self.browser_tabs)
        self.tab_urls = {}  # Dictionary to store URLs for each tab
        self.init_ui()
        self.load_bookmarks()  # Load bookmarks when initializing
        self.browser_tabs.currentChanged.connect(self.tab_changed)  # Connect tab change signal
        # Add a new tab and set Google as the default page
        self.add_new_tab("https://www.google.com")

    def init_ui(self):
        self.setWindowTitle("Stormy Browser")
        self.setGeometry(100, 100, 1024, 768)

        self.create_menu_bar()

        # Create navigation buttons and address bar
        self.back_button = QPushButton()
        self.back_button.setIcon(QIcon.fromTheme("go-previous"))
        self.forward_button = QPushButton()
        self.forward_button.setIcon(QIcon.fromTheme("go-next"))
        self.reload_button = QPushButton()
        self.reload_button.setIcon(QIcon.fromTheme("view-refresh"))
        self.stop_button = QPushButton()
        self.stop_button.setIcon(QIcon.fromTheme("process-stop"))
        self.home_button = QPushButton()
        self.home_button.setIcon(QIcon.fromTheme("go-home"))
        self.new_tab_button = QPushButton()
        self.new_tab_button.setIcon(QIcon.fromTheme("document-new"))
        self.print_button = QPushButton()
        self.print_button.setIcon(QIcon.fromTheme("printer"))
        self.remove_bookmark_button = QPushButton()
        self.remove_bookmark_button.setIcon(QIcon.fromTheme("bookmark-remove"))

        # Create a download button
        self.download_button = QPushButton()
        self.download_button.setIcon(QIcon.fromTheme("download"))
        

        self.address_bar = QLineEdit()
        self.address_bar.returnPressed.connect(self.load_url)

        # Create a toolbar to hold the navigation buttons, address bar, and additional buttons
        self.back_button.clicked.connect(self.navigate_back)
        self.forward_button.clicked.connect(self.navigate_forward)
        self.reload_button.clicked.connect(self.navigate_reload)
        self.stop_button.clicked.connect(self.navigate_stop)
        self.home_button.clicked.connect(self.open_home_page)
        self.new_tab_button.clicked.connect(self.add_new_tab)
        self.print_button.clicked.connect(self.print_page)
        self.download_button.clicked.connect(self.open_download_manager)
        self.remove_bookmark_button.clicked.connect(self.remove_bookmark)

        self.nav_toolbar = self.addToolBar("Navigation")
        self.nav_toolbar.addWidget(self.back_button)
        self.nav_toolbar.addWidget(self.forward_button)
        self.nav_toolbar.addWidget(self.reload_button)
        self.nav_toolbar.addWidget(self.stop_button)
        self.nav_toolbar.addWidget(self.home_button)
        self.nav_toolbar.addWidget(self.new_tab_button)
        self.nav_toolbar.addWidget(self.print_button)
        self.nav_toolbar.addWidget(self.address_bar)
        # Add the download button to the navigation toolbar
        self.nav_toolbar.addWidget(self.download_button)
        self.nav_toolbar.addWidget(self.remove_bookmark_button)

    def create_menu_bar(self):
        menu_bar = self.menuBar()

        # Create File menu
        file_menu = menu_bar.addMenu("File")
        self.add_bookmark_action = QAction("Add Bookmark", self)
        self.add_bookmark_action.triggered.connect(self.add_bookmark)
        file_menu.addAction(self.add_bookmark_action)

        # Create Bookmarks menu
        self.bookmarks_menu = menu_bar.addMenu("Bookmarks")

    def add_new_tab(self, url=""):
        browser_tab = QWidget()
        browser = QWebEngineView()
        browser.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        browser.setObjectName("browser")
        browser.setPage(StormyPage(browser))
        browser.urlChanged.connect(self.update_address_bar)
        print(f"Adding new tab with URL: {url}")
        layout = QVBoxLayout()
        layout.addWidget(browser)
        browser_tab.setLayout(layout)

        self.browser_tabs.addTab(browser_tab, "New Tab")
        self.browser_tabs.setCurrentWidget(browser_tab)

        if url:
            browser.setUrl(QUrl(url))
            self.tab_urls[browser_tab] = url  # Store the URL for this tab
        else:
            self.tab_urls[browser_tab] = ""

    def tab_changed(self, index):
        # Update the address bar when the active tab changes
        if index >= 0 and index < self.browser_tabs.count():
            current_tab = self.browser_tabs.widget(index)
            current_url = self.tab_urls.get(current_tab, "")
            self.address_bar.setText(current_url)

    def update_address_bar(self):
        current_browser = self.current_browser()
        if current_browser:
            url = current_browser.url().toString()
            self.address_bar.setText(url)
            current_tab = self.browser_tabs.currentWidget()
            self.tab_urls[current_tab] = url

    def close_tab(self, index):
        tab_widget = self.browser_tabs.widget(index)
        tab_name = self.browser_tabs.tabText(index)

        if tab_name in self.tab_urls:
            del self.tab_urls[tab_name]  # Remove the URL entry for the closed tab

        if self.browser_tabs.count() > 1:
            self.browser_tabs.removeTab(index)
        else:
            current_browser = tab_widget.findChild(QWebEngineView)
            current_browser.setUrl(QUrl("about:blank"))

        # Clear the address bar when closing a tab
        self.address_bar.clear()

    def current_browser(self):
        current_tab = self.browser_tabs.currentWidget()
        if current_tab:
            return current_tab.findChild(QWebEngineView)
        return None

    def navigate_back(self):
        current_browser = self.current_browser()
        if current_browser:
            current_browser.back()

    def navigate_forward(self):
        current_browser = self.current_browser()
        if current_browser:
            current_browser.forward()

    def navigate_reload(self):
        current_browser = self.current_browser()
        if current_browser:
            current_browser.reload()

    def navigate_stop(self):
        current_browser = self.current_browser()
        if current_browser:
            current_browser.stop()

    def navigate_home(self, default_url="https://www.yahoo.com"):
        # Open a new tab with the homepage URL
        self.add_new_tab(default_url)



    def open_home_page(self):
        # Call the navigate_home method with the desired URL
        self.navigate_home("https://www.google.com")


        



    def load_url(self):
        url = self.address_bar.text()
        if not url.startswith("http://") and not url.startswith("https://"):
            url = "https://" + url
        current_browser = self.current_browser()
        if current_browser:
            current_browser.setUrl(QUrl(url))
            current_tab = self.browser_tabs.currentWidget()
            self.tab_urls[current_tab] = url

    def add_bookmark(self):
        current_url = self.current_browser().url()
        bookmark_name, ok = QInputDialog.getText(self, "Add Bookmark", "Bookmark Name:")
        if ok and bookmark_name:
            bookmark_action = QAction(bookmark_name, self)
            bookmark_action.setData(current_url.toString())
            bookmark_action.triggered.connect(lambda _, url=current_url: self.load_bookmarked_url(url))
            self.bookmarks_menu.addAction(bookmark_action)
            self.save_bookmarks()

    def remove_bookmark(self):
        current_browser = self.current_browser()
        if current_browser:
            current_url = current_browser.url().toString()
            for action in self.bookmarks_menu.actions():
                if action.data() == current_url:
                    self.bookmarks_menu.removeAction(action)
                    self.save_bookmarks()
                    break

    def load_bookmarked_url(self, url):
        current_browser = self.current_browser()
        if current_browser:
            current_browser.setUrl(QUrl(url))

    def closeEvent(self, event):
        self.save_bookmarks()
        event.accept()

    def save_bookmarks(self):
        bookmarks = []
        for action in self.bookmarks_menu.actions():
            bookmarks.append({"name": action.text(), "url": action.data()})

        with open("bookmarks.json", "w") as f:
            json.dump(bookmarks, f)

    def load_bookmarks(self):
        try:
            with open("bookmarks.json", "r") as f:
                bookmarks = json.load(f)

            for bookmark in bookmarks:
                bookmark_action = QAction(bookmark["name"], self)
                bookmark_action.setData(bookmark["url"])
                bookmark_action.triggered.connect(lambda _, url=bookmark["url"]: self.load_bookmarked_url(url))
                self.bookmarks_menu.addAction(bookmark_action)

        except FileNotFoundError:
            pass

    def print_page(self):
        current_browser = self.current_browser()
        if current_browser:
            printer = QPrinter()
            dialog = QPrintDialog(printer, self)

            if dialog.exec_() == QPrintDialog.Accepted:
                current_browser.page().print(printer, self.handle_print_result)

    def handle_print_result(self, success):
        if success:
            print("Printing completed successfully.")
        else:
            print("Printing failed.")

    def open_download_manager(self):
        current_browser = self.current_browser()
        if current_browser:
            url = current_browser.url().toString()
            # Use subprocess to open your download manager (replace 'sdm' with the actual command)
            try:
                subprocess.Popen(['sdm', url])
            except FileNotFoundError:
                print("Download manager 'sdm' not found. Please provide the correct command.")



def main():
    app = QApplication(sys.argv)
    browser = StormyBrowser()
    browser.showMaximized()
    #browser.navigate_home()  # Open the homepage when the browser is launched
    # Check if the "--new-tab" switch is present
    if "--new-tab" in sys.argv:
        new_tab_index = sys.argv.index("--new-tab")
        if len(sys.argv) > new_tab_index + 1:
            url = sys.argv[new_tab_index + 1]
            browser.add_new_tab(url)

    sys.exit(app.exec_())

if __name__ == '__main__':
    main()


