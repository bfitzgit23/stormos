#!/usr/bin/env python3
import sys
import subprocess
import re
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QListWidget

def is_chromium_installed() -> bool:
    try:
        subprocess.check_output(["chromium", "--version"])
        return True
    except subprocess.CalledProcessError:
        return False

def get_bookmarks() -> list:
    """
    Retrieve the Chrome and Chromium bookmarks and extract the bookmark names and URLs using jq.
    Returns a list of tuples, where each tuple contains the name and URL of a bookmark.
    """
    bookmarks = []

    if is_chromium_installed():
        chromium_bookmarks_file = (
            subprocess.check_output(["bash", "-c", "echo $HOME"]).decode().strip()
            + "/.config/chromium/Default/Bookmarks"
        )
        chromium_bookmarks_data = subprocess.check_output(
            [
                "jq",
                '-r',
                '.. | objects | select(.type?=="url") | "\(.name)@@\(.url)"',
                chromium_bookmarks_file,
            ]
        ).decode().strip()
        chromium_bookmarks = [bookmark.split("@@") for bookmark in chromium_bookmarks_data.split("\n")]
        bookmarks.extend(chromium_bookmarks)

    return bookmarks

class BookmarkSearch(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Bookmark Searcher Arch Linux Version")
        self.setGeometry(100, 100, 800, 600)

        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        layout = QVBoxLayout(central_widget)

        search_layout = QHBoxLayout()
        self.entry = QLineEdit()
        self.entry.textChanged.connect(self.on_search)  # Call on_search on text change
        search_button = QPushButton("Search")
        search_button.clicked.connect(self.on_search)
        search_layout.addWidget(self.entry)
        search_layout.addWidget(search_button)

        layout.addLayout(search_layout)

        self.bookmark_list = QListWidget()
        layout.addWidget(self.bookmark_list)

        self.bookmark_list.itemDoubleClicked.connect(self.launch_browser_tab)

    def on_search(self):
        search_term = self.entry.text().lower()
        self.update_bookmark_list(search_term)

    def update_bookmark_list(self, search_term):
        self.bookmark_list.clear()
        bookmarks = get_bookmarks()
        for bookmark in bookmarks:
            name, url = bookmark[0], bookmark[1]
            # Use regular expressions for flexible matching
            if re.search(re.escape(search_term), name, re.IGNORECASE) or re.search(re.escape(search_term), url, re.IGNORECASE):
                self.bookmark_list.addItem(f"{name} - {url}")

    def launch_browser_tab(self, item):
        url = item.text().split(" - ")[-1]  # Extract URL
        if is_chromium_installed():
            subprocess.Popen(["chromium", "--new-tab", url])
        elif is_firefox_installed():
            subprocess.Popen(["firefox", "--new-tab", url])


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = BookmarkSearch()
    window.show()
    sys.exit(app.exec_())
